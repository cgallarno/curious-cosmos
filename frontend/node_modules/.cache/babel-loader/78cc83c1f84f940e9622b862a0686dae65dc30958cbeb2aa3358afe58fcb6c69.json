{"ast":null,"code":"var _jsxFileName = \"/home/distantanswer/Projects/curious-cosmos/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react'; // Import useState hook\nimport './App.css';\nimport YoutubeEmbed from \"./components/YoutubeEmbed.js\"; // Import the YoutubeEmbed component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Use state to store the video URLs\n  const [firstVideoUrl, setFirstVideoUrl] = useState(\"\");\n  const [secondVideoUrl, setSecondVideoUrl] = useState(\"\");\n\n  // Function to extract the video ID from a full YouTube URL\n  const extractVideoId = url => {\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/\\n\\s]+\\/\\S+\\/|(?:v|embed|shorts)\\/|\\S*?[?&]v=)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/;\n    const match = url.match(regex);\n    return match ? match[1] : \"\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add your YouTube video URLs!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter first YouTube video URL\",\n      onChange: e => setFirstVideoUrl(extractVideoId(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter second YouTube video URL\",\n      onChange: e => setSecondVideoUrl(extractVideoId(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-container\",\n      children: [/*#__PURE__*/_jsxDEV(YoutubeEmbed, {\n        embedId: firstVideoUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YoutubeEmbed, {\n        embedId: secondVideoUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aLALmf9j8PEi+Ef7wjHT4/S0BC8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","YoutubeEmbed","jsxDEV","_jsxDEV","App","_s","firstVideoUrl","setFirstVideoUrl","secondVideoUrl","setSecondVideoUrl","extractVideoId","url","regex","match","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","embedId","_c","$RefreshReg$"],"sources":["/home/distantanswer/Projects/curious-cosmos/src/App.js"],"sourcesContent":["import { useState } from 'react'; // Import useState hook\nimport './App.css';\nimport YoutubeEmbed from \"./components/YoutubeEmbed.js\"; // Import the YoutubeEmbed component\n\nfunction App() {\n  // Use state to store the video URLs\n  const [firstVideoUrl, setFirstVideoUrl] = useState(\"\");\n  const [secondVideoUrl, setSecondVideoUrl] = useState(\"\");\n\n  // Function to extract the video ID from a full YouTube URL\n  const extractVideoId = (url) => {\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/\\n\\s]+\\/\\S+\\/|(?:v|embed|shorts)\\/|\\S*?[?&]v=)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/;\n    const match = url.match(regex);\n    return match ? match[1] : \"\";\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add your YouTube video URLs!</h1>\n      \n      {/* First Input */}\n      <input\n        type=\"text\"\n        placeholder=\"Enter first YouTube video URL\"\n        onChange={(e) => setFirstVideoUrl(extractVideoId(e.target.value))}\n      />\n      \n      {/* Second Input */}\n      <input\n        type=\"text\"\n        placeholder=\"Enter second YouTube video URL\"\n        onChange={(e) => setSecondVideoUrl(extractVideoId(e.target.value))}\n      />\n      \n      {/* Embed components for both videos */}\n      <div className=\"video-container\">\n        <YoutubeEmbed embedId={firstVideoUrl} />\n        <YoutubeEmbed embedId={secondVideoUrl} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO,CAAC,CAAC;AAClC,OAAO,WAAW;AAClB,OAAOC,YAAY,MAAM,8BAA8B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAMU,cAAc,GAAIC,GAAG,IAAK;IAC9B,MAAMC,KAAK,GAAG,kIAAkI;IAChJ,MAAMC,KAAK,GAAGF,GAAG,CAACE,KAAK,CAACD,KAAK,CAAC;IAC9B,OAAOC,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EAC9B,CAAC;EAED,oBACEV,OAAA;IAAKW,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBZ,OAAA;MAAAY,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGrChB,OAAA;MACEiB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,+BAA+B;MAC3CC,QAAQ,EAAGC,CAAC,IAAKhB,gBAAgB,CAACG,cAAc,CAACa,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CAAC,eAGFhB,OAAA;MACEiB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,gCAAgC;MAC5CC,QAAQ,EAAGC,CAAC,IAAKd,iBAAiB,CAACC,cAAc,CAACa,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC,eAGFhB,OAAA;MAAKW,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BZ,OAAA,CAACF,YAAY;QAACyB,OAAO,EAAEpB;MAAc;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxChB,OAAA,CAACF,YAAY;QAACyB,OAAO,EAAElB;MAAe;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACd,EAAA,CArCQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}